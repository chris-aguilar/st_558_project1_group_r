[
  {
    "objectID": "st558_project1_group_r.html",
    "href": "st558_project1_group_r.html",
    "title": "ST 558 Project 1, Group R",
    "section": "",
    "text": "For this project, we’ll want to read in and prepare the data for analysis. Then we’ll actually conduct the analysis. But we’ll want to create functions for each step to make the code easy to maintain and debug and reuse as necessary.\nFirst, we’ll read in and prep the data manually. Afterward, we’ll put those manual steps into a function.\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# step 1 and 2 and 3\ncensus_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\") |&gt; \n  select(Area_name, STCOU, ends_with(\"D\")) |&gt; # step 1\n  rename(area_name = Area_name) |&gt; \n  pivot_longer(ends_with(\"D\")) |&gt; # step 2\n  mutate(\n    measurement = substr(name, 1, 7),\n    year = paste0(\"19\", substr(name, 8, 9)) |&gt; as.integer()) # step 3\n\nRows: 3198 Columns: 42\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# step 4\n# Grabbing state indices so we can split the data between county/non-county data\ncounty_idx &lt;-  grep(pattern = \", \\\\w\\\\w\", census_data$area_name)\n\n# county-level data\n# using indices for county level, and omitting indices for non-county level data\ncensus_county_lvl &lt;- census_data[county_idx, ]\ncensus_non_county_lvl &lt;- census_data[-county_idx, ]\n\n# New classes for new methods later\nclass(census_county_lvl) &lt;- c(\"county\", class(census_county_lvl))\nclass(census_non_county_lvl) &lt;- c(\"state\", class(census_non_county_lvl))\n\n# step 5\n# appending 2-char state abbreviation for county level data\n# stringr package allows us to index in reverse, no user defined function needed\ncensus_county_lvl &lt;- census_county_lvl |&gt; \n  mutate(state = stringr::str_sub(area_name, -2))\n\n# step 6\n# area_name has two versions of DC, which is in division 5. We'll standardize this. We assume these aren't true duplicates since STCOUs are different for upper, lowercase versions of DC.\n# We'll also use built-in R variables to make a reference table for the regions.\n# This will make appending division to our non-county level data simpler.\n\n# Making reference table\n# Upper casing state names for table join later\nstates_upper_case &lt;- c(toupper(state.name), \"DISTRICT OF COLUMBIA\")\nstates_division &lt;- c(state.division, factor(\"South Atlantic\"))\n\nstate_ref_table &lt;- data.frame(state = states_upper_case, division = states_division)\n\n# We'll join our state reference table to our census data to append divisions.\n# We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any divisions, just \"UNITED STATES\"\n\ncensus_non_county_lvl &lt;- census_non_county_lvl |&gt; \n  mutate(area_name = toupper(area_name)) |&gt; \n  left_join(state_ref_table, by = join_by(area_name == state)) |&gt;\n  mutate(division = as.character(division),\n         division = if_else(is.na(division), \"ERROR\", division))"
  },
  {
    "objectID": "st558_project1_group_r.html#manual-read-in",
    "href": "st558_project1_group_r.html#manual-read-in",
    "title": "ST 558 Project 1, Group R",
    "section": "",
    "text": "For this project, we’ll want to read in and prepare the data for analysis. Then we’ll actually conduct the analysis. But we’ll want to create functions for each step to make the code easy to maintain and debug and reuse as necessary.\nFirst, we’ll read in and prep the data manually. Afterward, we’ll put those manual steps into a function.\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# step 1 and 2 and 3\ncensus_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\") |&gt; \n  select(Area_name, STCOU, ends_with(\"D\")) |&gt; # step 1\n  rename(area_name = Area_name) |&gt; \n  pivot_longer(ends_with(\"D\")) |&gt; # step 2\n  mutate(\n    measurement = substr(name, 1, 7),\n    year = paste0(\"19\", substr(name, 8, 9)) |&gt; as.integer()) # step 3\n\nRows: 3198 Columns: 42\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# step 4\n# Grabbing state indices so we can split the data between county/non-county data\ncounty_idx &lt;-  grep(pattern = \", \\\\w\\\\w\", census_data$area_name)\n\n# county-level data\n# using indices for county level, and omitting indices for non-county level data\ncensus_county_lvl &lt;- census_data[county_idx, ]\ncensus_non_county_lvl &lt;- census_data[-county_idx, ]\n\n# New classes for new methods later\nclass(census_county_lvl) &lt;- c(\"county\", class(census_county_lvl))\nclass(census_non_county_lvl) &lt;- c(\"state\", class(census_non_county_lvl))\n\n# step 5\n# appending 2-char state abbreviation for county level data\n# stringr package allows us to index in reverse, no user defined function needed\ncensus_county_lvl &lt;- census_county_lvl |&gt; \n  mutate(state = stringr::str_sub(area_name, -2))\n\n# step 6\n# area_name has two versions of DC, which is in division 5. We'll standardize this. We assume these aren't true duplicates since STCOUs are different for upper, lowercase versions of DC.\n# We'll also use built-in R variables to make a reference table for the regions.\n# This will make appending division to our non-county level data simpler.\n\n# Making reference table\n# Upper casing state names for table join later\nstates_upper_case &lt;- c(toupper(state.name), \"DISTRICT OF COLUMBIA\")\nstates_division &lt;- c(state.division, factor(\"South Atlantic\"))\n\nstate_ref_table &lt;- data.frame(state = states_upper_case, division = states_division)\n\n# We'll join our state reference table to our census data to append divisions.\n# We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any divisions, just \"UNITED STATES\"\n\ncensus_non_county_lvl &lt;- census_non_county_lvl |&gt; \n  mutate(area_name = toupper(area_name)) |&gt; \n  left_join(state_ref_table, by = join_by(area_name == state)) |&gt;\n  mutate(division = as.character(division),\n         division = if_else(is.na(division), \"ERROR\", division))"
  },
  {
    "objectID": "st558_project1_group_r.html#creating-data-pre-processing-functions",
    "href": "st558_project1_group_r.html#creating-data-pre-processing-functions",
    "title": "ST 558 Project 1, Group R",
    "section": "Creating data pre-processing functions",
    "text": "Creating data pre-processing functions\nWe’ll create some functions to perform the following steps:\n\nRead in the census data and select Area_name, STCOU, and any column ending in “D”. We’ll also rename Area_name to area_name.\nConvert the data into long format, keeping Area_name as the reference for our enrollment values.\nA name column will create by default that contains the old column names. From these old column names, we’ll extract the survey type and the year.\nCreate two data sets, one for county-level data and one for non-county data. We’ll also add a state and county class to the relevant subsets of data.\nFor the county level data, we’ll create a variable that corresponds to the state a county belongs to.\nFor non-county level data, we’ll create a variable that corresponds to the [state’s classification of division].(https://en.wikipedia.org/wiki/List_of_regions_of_the_United_States)\n\n\nSteps 1-2\nWe’ll start with a function for steps 1-2. We’ll provide an optional argument that allows us to provide a name for the default value column that is created by pivot_longer.\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# step 1 and 2\n\nurl &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\"\ndefault_var_name &lt;- \"value\"\n\nread_and_pivot &lt;- function(url, default_var_name = \"value\") {\n  \n  census_data &lt;- read_csv(url) |&gt; \n    select(Area_name, STCOU, ends_with(\"D\")) |&gt; # step 1\n    rename(area_name = Area_name) |&gt; \n    pivot_longer(ends_with(\"D\"), values_to = default_var_name) # step 2\n  \n  census_data\n}\n\n\n\nStep 3\nFrom the default name column created by pivot_longer that captures the variable names ending in “D”, we’ll extract the survey type and year, which will be reflected by the measurement and year columns created, respectively.\nWe have to be careful, however. The exploration isn’t done here, but EDU01a.csv data captures the years 1987 - 1996, where the EDU01b.csv data captures the years 1997-2006. So we need to account for the millennium we’re in. With this in mind we’ve accounted for the range of years 1930-2029 as a defensive programming measure.\n\nextract_survey_and_year &lt;- function(df) {\n  \n  res &lt;- df |&gt;\n  mutate(\n      measurement = substr(name, 1, 7),\n      # year = paste0(\"19\", substr(name, 8, 9)) |&gt; as.integer())\n      year = ifelse(\n        substr(name, 8, 8) %in% c(\"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"), paste0(\"19\", substr(name, 8, 9)) |&gt; as.integer(),\n        ifelse(\n          substr(name, 8, 8) %in% c(\"0\", \"1\", \"2\"), paste0(\"20\", substr(name, 8, 9)) |&gt; as.integer(),\n          NA)\n        )\n  )\n  \n  res\n}\n\n\n\nStep 5\nThe data from step 3 above will result in a data frame with county-level and non-county level data, each of which will require different prep methods. Here, we’ll create a function to extract the county-level state from area_name.\n\nlibrary(stringr)\n\n# stringr's str_sub allows us to substring in reverse, easier than base R's substr\nextract_state_from_area &lt;- function(census_county_lvl) {\n  res &lt;- census_county_lvl |&gt; \n    mutate(state = stringr::str_sub(area_name, -2)) # grab last two characters\n  \n  res\n}\n\n\n\nStep 6\nFor non-county level data, we’ll create a function that assigns a variable that corresponds to the [state’s classification of division].(https://en.wikipedia.org/wiki/List_of_regions_of_the_United_States)\nThe approach we take will make use of some built-in state data in R.\n\n# step 6\n# area_name has two versions of DC, uppercase and lowercase, which is in division 5. We'll standardize this. \n# We assume these aren't true duplicates since STCOUs are different for upper, lowercase versions of DC.\n# We'll also use built-in R variables to make a reference table for the regions.\n# This will make appending division to our non-county level data simpler.\n\nassign_state_divisions &lt;- function(census_non_county_lvl) {\n  # Making reference table\n  # Upper casing state names for table join later\n  states_upper_case &lt;- c(toupper(state.name), \"DISTRICT OF COLUMBIA\") # DC doesn't exist in this vector, so we add it\n  states_division &lt;- c(state.division, factor(\"South Atlantic\")) # Adding DC's division level to factor vector of divisions\n  \n  state_ref_table &lt;- data.frame(state = states_upper_case, division = states_division)\n  \n  # We'll join our state reference table to our census data to append divisions.\n  # We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any state divisions\n  \n  res &lt;- census_non_county_lvl |&gt; \n    mutate(area_name = toupper(area_name)) |&gt; \n    left_join(state_ref_table, by = join_by(area_name == state)) |&gt;\n    mutate(division = as.character(division),\n           division = if_else(is.na(division), \"ERROR\", division))\n  \n  res\n}\n\n\n\nPutting steps 4, 5, and 6 together\nWe mentioned that the data has county-level and non-county-level data that needs to be addressed separately. Functions for steps 5 and 6 do this. We now address step 4, which is splitting the data into county and non-county level data. We’ll combine this right into steps 5 and 6 below.\n\nsplit_census_data &lt;- function(census_data) {\n  \n  # step 4\n  \n  # Grabbing state indices so we can split the data between county/non-county data\n  # This is because county-level data follows the pattern \"County, DD\"\n  # DD is the state abbreviation.\n  county_idx &lt;-  grep(pattern = \", \\\\w\\\\w\", census_data$area_name)\n  \n  # using indices for county level, and omitting indices for non-county level data\n  census_county_lvl &lt;- census_data[county_idx, ]\n  census_non_county_lvl &lt;- census_data[-county_idx, ]\n  \n  # New classes for new methods later\n  class(census_county_lvl) &lt;- c(\"county\", class(census_county_lvl))\n  class(census_non_county_lvl) &lt;- c(\"state\", class(census_non_county_lvl))\n  \n  # step 5\n  \n  # applying step 5 for county level data\n  county_res &lt;- extract_state_from_area(census_county_lvl)\n  \n  # step 6\n  \n  # applying step 6 for non-county level data\n  state_res &lt;- assign_state_divisions(census_non_county_lvl)\n  \n  full_res &lt;- list(county_data = county_res, state_data = state_res)\n  \n  full_res\n}\n\n\n\nCombining steps 1-6 in a wrapper function\nWe’ll now create a wrapper function that combines the functions created above into one call. It’ll take as input the data’s url, and an optional argument for the enrollment column name created by pivot_longer.\n\nprepare_census_data &lt;- function(url, default_var_name = \"enrollment\") {\n  \n  res &lt;- read_and_pivot(url, default_var_name) |&gt; # step 1, 2 \n    extract_survey_and_year() |&gt; # step 3\n    split_census_data() # step 4, 5, 6\n  \n  res\n}\n\n\n\nUsing wrapper function for Census data\nWe’ll be calling our wrapper function above on the following two datasets:\n\nhttps://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\nhttps://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\n\nThen we’ll be combining the county- and state-level results from each appropriately.\n\n# Reading in and prepping the two EDU01 census .csv files given\n\ncensus_edu01a &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", \"enrollment\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncensus_edu01b &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", \"enrollment\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# helper function to combine the two sets of data\ncombine_data &lt;- function(list_of_dfs1, list_of_dfs2) {\n  \n  # county\n  county_res &lt;- bind_rows(list_of_dfs1$county_data, list_of_dfs2$county_data)\n  \n  # state\n  state_res &lt;- bind_rows(list_of_dfs1$state_data, list_of_dfs2$state_data)\n  \n  res &lt;- list(county_data = county_res, state_data = state_res)\n  \n  res\n}\n\nWe now call our combine_data function to save the results of the prepared EDU01a and EDU01b data sets into a two-element list of dataframes, where each element of the list corresponds to combined county-level and state-level data.\n\ncensus_data &lt;- combine_data(census_edu01a, census_edu01b)\n\ncensus_data\n\n$county_data\n# A tibble: 62,900 × 7\n   area_name   STCOU name       enrollment measurement  year state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D       6829 EDU0101      1987 AL   \n 2 Autauga, AL 01001 EDU010188D       6900 EDU0101      1988 AL   \n 3 Autauga, AL 01001 EDU010189D       6920 EDU0101      1989 AL   \n 4 Autauga, AL 01001 EDU010190D       6847 EDU0101      1990 AL   \n 5 Autauga, AL 01001 EDU010191D       7008 EDU0101      1991 AL   \n 6 Autauga, AL 01001 EDU010192D       7137 EDU0101      1992 AL   \n 7 Autauga, AL 01001 EDU010193D       7152 EDU0101      1993 AL   \n 8 Autauga, AL 01001 EDU010194D       7381 EDU0101      1994 AL   \n 9 Autauga, AL 01001 EDU010195D       7568 EDU0101      1995 AL   \n10 Autauga, AL 01001 EDU010196D       7834 EDU0101      1996 AL   \n# ℹ 62,890 more rows\n\n$state_data\n# A tibble: 1,060 × 7\n   area_name     STCOU name       enrollment measurement  year division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D   40024299 EDU0101      1987 ERROR   \n 2 UNITED STATES 00000 EDU010188D   39967624 EDU0101      1988 ERROR   \n 3 UNITED STATES 00000 EDU010189D   40317775 EDU0101      1989 ERROR   \n 4 UNITED STATES 00000 EDU010190D   40737600 EDU0101      1990 ERROR   \n 5 UNITED STATES 00000 EDU010191D   41385442 EDU0101      1991 ERROR   \n 6 UNITED STATES 00000 EDU010192D   42088151 EDU0101      1992 ERROR   \n 7 UNITED STATES 00000 EDU010193D   42724710 EDU0101      1993 ERROR   \n 8 UNITED STATES 00000 EDU010194D   43369917 EDU0101      1994 ERROR   \n 9 UNITED STATES 00000 EDU010195D   43993459 EDU0101      1995 ERROR   \n10 UNITED STATES 00000 EDU010196D   44715737 EDU0101      1996 ERROR   \n# ℹ 1,050 more rows\n\n\nWe are now ready to analyze this data."
  },
  {
    "objectID": "st558_project1_group_r.html#data-processing",
    "href": "st558_project1_group_r.html#data-processing",
    "title": "ST 558 Project 1, Group R",
    "section": "Data processing",
    "text": "Data processing\nFirst, we will run the census raw data URLs through our prepare_census_data function to generate data frames for combining into our object for analysis.\n\n# Reading in and prepping the two EDU01 census .csv files given\n\ncensus_edu01a &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", \"enrollment\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncensus_edu01b &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", \"enrollment\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "st558_project1_group_r.html#data-combining",
    "href": "st558_project1_group_r.html#data-combining",
    "title": "ST 558 Project 1, Group R",
    "section": "Data combining",
    "text": "Data combining\nProcessing our data frames through the combine_data function provides us with the single object we need for analysis.\n\ncensus_data &lt;- combine_data(census_edu01a, census_edu01b)\n\ncensus_data\n\n$county_data\n# A tibble: 62,900 × 7\n   area_name   STCOU name       enrollment measurement  year state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D       6829 EDU0101      1987 AL   \n 2 Autauga, AL 01001 EDU010188D       6900 EDU0101      1988 AL   \n 3 Autauga, AL 01001 EDU010189D       6920 EDU0101      1989 AL   \n 4 Autauga, AL 01001 EDU010190D       6847 EDU0101      1990 AL   \n 5 Autauga, AL 01001 EDU010191D       7008 EDU0101      1991 AL   \n 6 Autauga, AL 01001 EDU010192D       7137 EDU0101      1992 AL   \n 7 Autauga, AL 01001 EDU010193D       7152 EDU0101      1993 AL   \n 8 Autauga, AL 01001 EDU010194D       7381 EDU0101      1994 AL   \n 9 Autauga, AL 01001 EDU010195D       7568 EDU0101      1995 AL   \n10 Autauga, AL 01001 EDU010196D       7834 EDU0101      1996 AL   \n# ℹ 62,890 more rows\n\n$state_data\n# A tibble: 1,060 × 7\n   area_name     STCOU name       enrollment measurement  year division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D   40024299 EDU0101      1987 ERROR   \n 2 UNITED STATES 00000 EDU010188D   39967624 EDU0101      1988 ERROR   \n 3 UNITED STATES 00000 EDU010189D   40317775 EDU0101      1989 ERROR   \n 4 UNITED STATES 00000 EDU010190D   40737600 EDU0101      1990 ERROR   \n 5 UNITED STATES 00000 EDU010191D   41385442 EDU0101      1991 ERROR   \n 6 UNITED STATES 00000 EDU010192D   42088151 EDU0101      1992 ERROR   \n 7 UNITED STATES 00000 EDU010193D   42724710 EDU0101      1993 ERROR   \n 8 UNITED STATES 00000 EDU010194D   43369917 EDU0101      1994 ERROR   \n 9 UNITED STATES 00000 EDU010195D   43993459 EDU0101      1995 ERROR   \n10 UNITED STATES 00000 EDU010196D   44715737 EDU0101      1996 ERROR   \n# ℹ 1,050 more rows\n\n\n\nState Plot\nUsing the plot.state function on census_data generates the plot of the state_data frame. This plot provides useful information that can be used to generate research questions to determine what cause such a contrast between the top 4 divisions from the bottom 5.\n\nplot.state(census_data)\n\n`summarise()` has grouped output by 'division'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nCounty plots\nUsing the plot.county function on county_data to generate plots using the below specified criteria provides useful information that can be used to generate research questions.\n\nSpecify state to be “NC”, group to be the “top”, and the number to be looked at being “20”.\n\n\nplot.county(census_data, state_val = \"NC\", var_name = \"enrollment\", group = \"top\", row_display = 20)\n\n\n\n\n\n\n\n\n\nSpecify state to be “SC”, group to be the “bottom”, and the number to be looked at being “7”.\n\n\nplot.county(census_data, state_val = \"SC\", var_name = \"enrollment\", group = \"bottom\", row_display = 7)\n\n\n\n\n\n\n\n\n\nUsing defaults\n\n\nplot.county(census_data)\n\n\n\n\n\n\n\n\n\nSpecifiy state to be “PA”, group to be the “top”, and the number to be looked at being “8”.\n\n\nplot.county(census_data, state_val = \"PA\", var_name = \"enrollment\", group = \"top\", row_display = 8)"
  },
  {
    "objectID": "st558_project1_group_r.html#read-in-similar-data-sets-and-apply-the-developed-functions.",
    "href": "st558_project1_group_r.html#read-in-similar-data-sets-and-apply-the-developed-functions.",
    "title": "ST 558 Project 1, Group R",
    "section": "Read in similar data sets and apply the developed functions.",
    "text": "Read in similar data sets and apply the developed functions.\n\nData processing\nProcessing the below URLs through the data processing function provides us with data frames PST01a through PST01d that we will combine into one object with data frames state_data and county_data.\n\nhttps://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\nhttps://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\nhttps://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\nhttps://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\n\n\nPST01a &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\", \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST015171N1, PST015171N2, PST015172N1, PST015172...\ndbl (20): PST015171F, PST015171D, PST015172F, PST015172D, PST015173F, PST015...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nPST01b &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\", \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST025182N1, PST025182N2, PST025183N1, PST025183...\ndbl (20): PST025182F, PST025182D, PST025183F, PST025183D, PST025184F, PST025...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nPST01c &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\", \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST035191N1, PST035191N2, PST035192N1, PST035192...\ndbl (20): PST035191F, PST035191D, PST035192F, PST035192D, PST035193F, PST035...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nPST01d &lt;- prepare_census_data(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\", \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST045200N1, PST045200N2, PST045201N1, PST045201...\ndbl (20): PST045200F, PST045200D, PST045201F, PST045201D, PST045202F, PST045...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "st558_project1_group_r.html#data-combining-1",
    "href": "st558_project1_group_r.html#data-combining-1",
    "title": "ST 558 Project 1, Group R",
    "section": "Data combining",
    "text": "Data combining\nProcessing our newly generated data frames through our data will generate our PST01_combined data objet that will be used for subsetting before analysis. Because our function in only designed to combine two data frames at a time, we will combine PST01a with PST01b, PST01c with PST01d, then combining the resulting data frames PST01ab and PST01cd to create our desired object PST01_combined.\n\nPST01ab &lt;- combine_data(PST01a, PST01b)\n\nPST01cd &lt;- combine_data(PST01c, PST01d)\n\nPST01_combined &lt;- combine_data(PST01ab, PST01cd)"
  },
  {
    "objectID": "st558_project1_group_r.html#state-data-frame-plot",
    "href": "st558_project1_group_r.html#state-data-frame-plot",
    "title": "ST 558 Project 1, Group R",
    "section": "State data frame plot",
    "text": "State data frame plot\nNow that we have our data object, will use the function plot.state to generate the plot of PST01_combined’s state data frame in order to compare the mean populations of the different divisions.\n\nplot.state(PST01_combined, \"population\")\n\n`summarise()` has grouped output by 'division'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "st558_project1_group_r.html#county-data-frame-plots",
    "href": "st558_project1_group_r.html#county-data-frame-plots",
    "title": "ST 558 Project 1, Group R",
    "section": "County data frame plots",
    "text": "County data frame plots\nNext, we will use the plot.county function to generate the plot of PST01_combined’s county data frame using the below specified criteria.\n\nSpecify the state to be “CA”, the group to be the “top”, and the number looked at being “15”.\n\n\nplot.county(PST01_combined, state_val = \"CA\", var_name = \"population\", group = \"top\", row_display = 15)\n\n\n\n\n\n\n\n\n\nSpecify the state to be “TX”, the group to be the “top”, and the number looked at being “4”.\n\n\nplot.county(PST01_combined, state_val = \"TX\", var_name = \"population\", group = \"top\", row_display = 4)\n\n\n\n\n\n\n\n\n\nUsing defaults only.\n\nUsing the default value of “enrollment” for the variable “population” renders an error message. The funciton has been commented out to allow the rest of the program to work and permitting rendering, committing, and pushing the program to GitHub.\n\n# plot.county(PST01_combined)\n\n\nError in summarize(): ℹ In argument: mean_value = mean(get(var_name)). ℹ In group 1: area_name = \"Alamance, NC\". Caused by error in get(): ! object ‘enrollment’ not found Backtrace: 1. global plot.county(PST01_combined) 12. base::get(var_name) Error in summarize(group_by(filter(df$county_data, state == state_val), :\nℹ In group 1: area_name = \"Alamance, NC\". Caused by error in get(): ! object ‘enrollment’ not found\n\n\nSpecifying the state to be “NY”, the group being the “top”, and the number looked at being “10”.\n\n\nplot.county(PST01_combined, state_val = \"NY\", var_name = \"population\", group = \"top\", row_display = 10)"
  }
]