---
title: "ST 558 Project 1, Group R"
author: "Chris Aguilar, Jason Pattison"
format: html
editor: visual
---

# Introduction

For this project, our goal is to create functions to aid in data analysis. We'll be showcasing the following:

  1. We'll create a script of manual data ingestion and cleaning functions.
  2. Once that works, we'll create functions to replicate step 1.
  3. Next we'll create functions to combine the prepared data.
  4. We'll create functions to plot state and county level data.
  5. Finally, we'll use all the above functions on relevant subsets of the datasets.

## Manual read-in

For this project, we'll want to read in and prepare the data for analysis. Then we'll conduct a summary analysis using data plots.

In order to generate the main functions properly, we will create functions that execute data processing step that will make the code easy to maintain, debug, and reuse as necessary.

First, we'll read in and prep the data manually. Afterward, we'll put those manual steps into a function.

Before we can start using tidyverse functions, we need to ensure we call them into our work library for R to use.

```{r create libraries for use}
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
```

For steps 1, 2 and 3 we will need to read in the .csv file, structure the data to ensure each value of interest only has one observation, and ensure we extract the year of each value from the survey code.

```{r data processing development, steps 1 through 3}

census_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv") |> 
  select(Area_name, STCOU, ends_with("D")) |> # step 1
  rename(area_name = Area_name) |> 
  pivot_longer(ends_with("D")) |> # step 2
  mutate(
    measurement = substr(name, 1, 7),
    year = paste0("19", substr(name, 8, 9)) |> as.integer()) # step 3

```

For step 4 we will index the data to extract the state from `area_name` to generate `state` as a separate variable. To do this we will generate a variable `county_idx` that will allow us to use `[county_idx, ]` and `[-county_idx, ]` to generate the county and non-county data, then classify them as "county" and "state".

```{r data procesing development, step 4}
# Grabbing state indices so we can split the data between county/non-county data
county_idx <-  grep(pattern = ", \\w\\w", census_data$area_name)

# county-level data
# using indices for county level, and omitting indices for non-county level data
census_county_lvl <- census_data[county_idx, ]
census_non_county_lvl <- census_data[-county_idx, ]

# New classes for new methods later
class(census_county_lvl) <- c("county", class(census_county_lvl))
class(census_non_county_lvl) <- c("state", class(census_non_county_lvl))
```

In Step 5 we use the class variables generated in Step 4 to further develop our county data frame. Using the `stringr` package allows us to append the 2-character state abbreviation for county level data while eliminating the need to generate a user defined function.

```{r data procesing development, step 5}
# appending 2-char state abbreviation for county level data
census_county_lvl <- census_county_lvl |> 
  mutate(state = stringr::str_sub(area_name, -2))
```

In Step 6 we will use built-in R variables to assign region information to the observations.

There are two versions of DC (uppercase and lowercase). The STCOUs are different for the uppercase and lowercase versions of DC so we cannot assume these are duplicate observations. Because of this we've standardized DC.

Additionally, we used upper casing state names for use in a table join to further shape the `census_non_county_lvl` data frame.

```{r data procesing development, step 6}

states_upper_case <- c(toupper(state.name), "DISTRICT OF COLUMBIA")

states_division <- c(state.division, factor("South Atlantic"))

state_ref_table <- data.frame(state = states_upper_case, division = states_division)

# We'll join our state reference table to our census data to append divisions.
# We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any divisions, just "UNITED STATES"

census_non_county_lvl <- census_non_county_lvl |> 
  mutate(area_name = toupper(area_name)) |> 
  left_join(state_ref_table, by = join_by(area_name == state)) |>
  mutate(division = as.character(division),
         division = if_else(is.na(division), "ERROR", division))
```

## Creating data pre-processing functions

Now that we've derived the different data framing steps, we'll create some functions to automate the data cleaning process:

1.  Read in the census data and select `Area_name`, `STCOU`, and any column ending in "D". We'll also rename `Area_name` to `area_name`.
2.  Convert the data into long format, keeping `Area_name` as the reference for our enrollment values.
3.  A `name` column will create by default that contains the old column names. From these old column names, we'll extract the survey type and the year.
4.  Create two data sets, one for county-level data and one for non-county data. We'll also add a `state` and `county` class to the relevant subsets of data.
5.  For the county level data, we'll create a variable that corresponds to the state a county belongs to.
6.  For non-county level data, we'll create a variable that corresponds to the \[state's classification of division\].(https://en.wikipedia.org/wiki/List_of_regions_of_the_United_States)

### Steps 1-2

We'll start with a function for steps 1-2. We'll provide an optional argument that allows us to provide a name for the default `value` column that is created by `pivot_longer`.

```{r steps 1-2}

library(readr)
library(dplyr)
library(tidyr)

# step 1 and 2

url <- "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv"
default_var_name <- "value"

read_and_pivot <- function(url, default_var_name = "value") {
  
  census_data <- read_csv(url) |> 
    select(Area_name, STCOU, ends_with("D")) |> # step 1
    rename(area_name = Area_name) |> 
    pivot_longer(ends_with("D"), values_to = default_var_name) # step 2
  
  census_data
}

```

### Step 3

From the default `name` column created by `pivot_longer` that captures the variable names ending in "D", we'll extract the survey type and year, which will be reflected by the `measurement` and `year` columns created, respectively.

We have to be careful, however. The exploration isn't done here, but `EDU01a.csv` data captures the years 1987 - 1996, where the `EDU01b.csv` data captures the years 1997-2006. So we need to account for the millennium we're in. With this in mind we've accounted for the range of years 1930-2029 as a defensive programming measure.

```{r step 3}

extract_survey_and_year <- function(df) {
  
  res <- df |>
  mutate(
      measurement = substr(name, 1, 7),
      # year = paste0("19", substr(name, 8, 9)) |> as.integer())
      year = ifelse(
        substr(name, 8, 8) %in% c("3", "4", "5", "6", "7", "8", "9"), paste0("19", substr(name, 8, 9)) |> as.integer(),
        ifelse(
          substr(name, 8, 8) %in% c("0", "1", "2"), paste0("20", substr(name, 8, 9)) |> as.integer(),
          NA)
        )
  )
  
  res
}

```

### Step 4

Here we create an index (`county_idx`) of `area_name` for splitting the observations into county and non-county categories. We will use `census_county_lvl` for our county data, and `census_non_county_lvl` for our state data. We then convert these data frames into "classes" using the `class()` function for use in Steps 5 and 6.

```{r}
county_idx <-  grep(pattern = ", \\w\\w", census_data$area_name)

census_county_lvl <- census_data[county_idx, ]

census_non_county_lvl <- census_data[-county_idx, ]

class(census_county_lvl) <- c("county", class(census_county_lvl))

class(census_non_county_lvl) <- c("state", class(census_non_county_lvl))
```

### Step 5

The data from step 3 above will result in a data frame with county-level and non-county level data, each of which will require different prep methods. Here, we'll create a function using `stringr` to extract the county-level state from `area_name`.

```{r step 5}

# stringr's str_sub allows us to substring in reverse, easier than base R's substr
extract_state_from_area <- function(census_county_lvl) {
  library(stringr) 
  
  res <- census_county_lvl |> 
    mutate(state = stringr::str_sub(area_name, -2)) # grab last two characters
  
  res
}

```

### Step 6

For non-county level data, we'll create a function that assigns a variable that corresponds to the [state's classification of division.](https://en.wikipedia.org/wiki/List_of_regions_of_the_United_States)

The approach we take will make use of some built-in state data in R to join with our data frame to assign the states to a division. We explicitly cohersed the divisions to character type to ensure the `mutate` function worked correctly.Additionally, we assigned the value "ERROR" to any "NA" that result from an area_name not being assigned to a division.

```{r step 6}

assign_state_divisions <- function(census_non_county_lvl) {

  states_upper_case <- c(toupper(state.name), "DISTRICT OF COLUMBIA") # DC doesn't exist in this vector, so we add it
  
  states_division <- c(state.division, factor("South Atlantic")) # Adding DC's division level to factor vector of divisions
  
  state_ref_table <- data.frame(state = states_upper_case, division = states_division)
  
  # We'll join our state reference table to our census data to append divisions.
  # We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any state divisions
  
  res <- census_non_county_lvl |> 
    mutate(area_name = toupper(area_name)) |> 
    left_join(state_ref_table, by = join_by(area_name == state)) |>
    mutate(division = as.character(division),
           division = if_else(is.na(division), "ERROR", division))
  
  res
}

```

### Putting steps 4, 5, and 6 together

We mentioned above that the data has county-level and non-county-level data that needs to be addressed separately. The data frames we created in Step 4 will not be combined with the functions developed in Steps 5 and 6 to split the data into two data frames inside of a main object.

```{r steps 4 5 6}

split_census_data <- function(census_data) {
  
  # use variables created in step 4
  
  county_idx <-  grep(pattern = ", \\w\\w", census_data$area_name)
  
  census_county_lvl <- census_data[county_idx, ]

  census_non_county_lvl <- census_data[-county_idx, ]
  
  class(census_county_lvl) <- c("county", class(census_county_lvl))

    class(census_non_county_lvl) <- c("state", class(census_non_county_lvl))
  
  # apply step 5 to generate county data frame
  
  county_res <- extract_state_from_area(census_county_lvl)
  
  # apply step 6 to generate state data frame
  
  state_res <- assign_state_divisions(census_non_county_lvl)
  
  #combine data frames into census data object 
  
  full_res <- list(county_data = county_res, state_data = state_res)
  
  full_res
}


```

### Combining steps 1-6 in a wrapper function

We'll now create a wrapper function that combines the functions created above into one call. It'll take as input the data's url, and an optional argument for the `enrollment` column name created by `pivot_longer`.

```{r wrapper function}


prepare_census_data <- function(url, default_var_name = "enrollment") {
  
  res <- read_and_pivot(url, default_var_name) |> # step 1, 2 
    extract_survey_and_year() |> # step 3
    split_census_data() # step 4, 5, 6
  
  res
}

```

### Using wrapper function for Census data

Now that we have developed our data preparation function, we need to test it.

Processing the URLs

1.  `https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv`
2.  `https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv`

```{r}
census_edu01a <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", "enrollment")

census_edu01b <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", "enrollment")
```

Both of these files have read in correctly, so we can move on to combining the two data frames into one using the user generated functon `combine_data`.

```{r data combining development}

combine_data <- function(list_of_dfs1, list_of_dfs2) {
  
  # county
  county_res <- bind_rows(list_of_dfs1$county_data, list_of_dfs2$county_data)
  
  # state
  state_res <- bind_rows(list_of_dfs1$state_data, list_of_dfs2$state_data)
  
  res <- list(county_data = county_res, state_data = state_res)
  
  res
}
```

We now call our `combine_data` function to save the results of the prepared `EDU01a` and `EDU01b` data sets into a two-element list of dataframes, where each element of the list corresponds to combined county-level and state-level data.

```{r data ready for use}

census_data <- combine_data(census_edu01a, census_edu01b)

census_data
```

We are now ready to analyze this data.

## Class State plotting function

For the State class plot we've developed a function that maps the mean value of the variable of interest, in this case `enrollment`, across the years for each Division. There are twenty "Error" values for Division that have been removed as part of generating the subset prior to plotting the data.

```{r state class plot fn development}

# specify data frame, default variable name, 
plot.state <- function(df, var_name = "enrollment"){
  library(ggplot2)
  
# create subset data for plotting
state_variable_plot <- df$state_data |>

# remove the error values
    filter(division != "ERROR") |>  

# subset the data to the variables of interest
    group_by(division, year) |> 
  #create the mean statistic for plotting
    summarize("mean_value" = mean(get(var_name)))

# generate the plot of year vs mean
  g_state <- ggplot(state_variable_plot, aes(year, mean_value, color=division)) 

# plot the division values
  g_state + 
    geom_line() +
    labs(title = paste("Average yearly", var_name, "by state division")) +
    xlab("Year") +
    ylab(paste("Average", var_name))

}

# Calling on a dataframe of class "state" with a default variable-of-interest called "enrollment"
plot.state(census_data)

```

## Class County plotting function

Next we created a similar plotting function with more flexibility. The county plotting function allows the user to specify a state of interest and determine how many of the top or bottom counties in the state they want to observe the average enrollment for.

```{r county class plot fn development}

# specify state, top/bottom, and number of results displayed in the function
plot.county <- function(df, var_name = "enrollment", state_val = "NC", group = "top", row_display = 5) {
  library(ggplot2)
  library(stringr)
  
# extract the county df from the census_data object
  county_variable_subset <-  df$county_data |>

# filter the data to show only the state specified in the function string
    filter(state == state_val) |>
    
# find the overall mean of the statistic for each area name
    group_by(area_name) |> 
    summarize("mean_value" = mean(get(var_name))) 
  
# Sort the data to display the enrollment means from largest to smallest when "top" is chosen, or from smallets to largest when "bottom" is chosen. 

if(group == "top") {
  sorted_data <- county_variable_subset |> arrange(desc(mean_value))
} else if(group == "bottom") {
  sorted_data <- county_variable_subset |> arrange(mean_value)
} else {
  stop("group must be in one of c('top', 'bottom')")
}
  
# obtain the top or bottom x number of area_names where the number is given by the user or default and filter the data to only include the top or bottom area names for graphing
  
  Display_num_subset <- head(sorted_data, row_display)

  # obtaining data corresponding to the top/bottom counties of interest
  
  counties_of_interest <- df$county_data |> semi_join(Display_num_subset, by = join_by(area_name))
  
  counties_of_interest |> 
    ggplot(aes(x = year, y = get(var_name), color = area_name)) + 
    geom_line() +
    xlab("Year") +
    ylab(str_to_title(str_replace(get("var_name"), pattern = "_", replacement = " "))) +
    labs(title = paste(str_to_title(paste(var_name, "by county")), "in", state_val), 
         subtitle = str_to_sentence(paste(group, row_display, "counties")))

}

# Calling on a dataframe of class "county" with a default values that produce the top 5 enrollment counties in NC. 
plot.county(census_data)

```

We can now utilize the above methods `plot.state` and `plot.county` to create time series plots for our numeric values of interest, and plots of the average value of interest by county.

# Putting it together

Throughout this report we've generated helper functions, tested them independently, and combined the functions header strings into a wrapper function.

This has been successful, so now it is time to compile the multiple functions and their supporting code to ensure the data processing and data combining functions work independently if we were to clear everything out from the R Studio environment tab.

After processing the data, we will combine he data using the `combine_data` user generated function.

## Data processing

```{r Prepare Census Data Wrapper (all code)}

prepare_census_data <- function(url, default_var_name = "enrollment") {

# create libraries for package use


library(readr)
library(dplyr)
library(tidyr)


# # step 1 and 2 and 3. Read URL into census_data df, then mutatae to create single observations for each survey code ending with "D".


read_and_pivot <- function(url, default_var_name = "value") {
  
  census_data <- read_csv(url) |> 
    select(Area_name, STCOU, ends_with("D")) |> # step 1
    rename(area_name = Area_name) |> 
    pivot_longer(ends_with("D"), values_to = default_var_name) # step 2
  
  census_data
}


# extract the year from the survey code


extract_survey_and_year <- function(df) {
  
  res <- df |>
  mutate(
      measurement = substr(name, 1, 7),
      # year = paste0("19", substr(name, 8, 9)) |> as.integer())
      year = ifelse(
        substr(name, 8, 8) %in% c("3", "4", "5", "6", "7", "8", "9"), paste0("19", substr(name, 8, 9)) |> as.integer(),
        ifelse(
          substr(name, 8, 8) %in% c("0", "1", "2"), paste0("20", substr(name, 8, 9)) |> as.integer(),
          NA)
        )
  )
  
  res
}


# separate the state data from the area data


extract_state_from_area <- function(census_county_lvl) {
  res <- census_county_lvl |> 
    mutate(state = stringr::str_sub(area_name, -2)) # grab last two characters
  
  res
}


# assign the state divisions to the non-county data frame

assign_state_divisions <- function(census_non_county_lvl) {
  # Making reference table
  # Upper casing state names for table join later
  states_upper_case <- c(toupper(state.name), "DISTRICT OF COLUMBIA") # DC doesn't exist in this vector, so we add it
  
  states_division <- c(state.division, factor("South Atlantic")) # Adding DC's division level to factor vector of divisions
  
  state_ref_table <- data.frame(state = states_upper_case, division = states_division)
  
  # We'll join our state reference table to our census data to append divisions.
  # We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any state divisions
  
  res <- census_non_county_lvl |> 
    mutate(area_name = toupper(area_name)) |> 
    left_join(state_ref_table, by = join_by(area_name == state)) |>
    mutate(division = as.character(division),
           division = if_else(is.na(division), "ERROR", division))
  
  res
}


# split the census data into state and county data frames


split_census_data <- function(census_data) {
  
  # step 4
  
  # Grabbing state indices so we can split the data between county/non-county data
  # This is because county-level data follows the pattern "County, DD"
  # DD is the state abbreviation.
  county_idx <-  grep(pattern = ", \\w\\w", census_data$area_name)
  
  # using indices for county level, and omitting indices for non-county level data
  census_county_lvl <- census_data[county_idx, ]
  census_non_county_lvl <- census_data[-county_idx, ]
  
  # New classes for new methods later
  class(census_county_lvl) <- c("county", class(census_county_lvl))
  class(census_non_county_lvl) <- c("state", class(census_non_county_lvl))
  
  # step 5
  
  # applying step 5 for county level data
  county_res <- extract_state_from_area(census_county_lvl)
  
  # step 6
  
  # applying step 6 for non-county level data
  state_res <- assign_state_divisions(census_non_county_lvl)
  
  full_res <- list(county_data = county_res, state_data = state_res)
  
  full_res
}

  res <- read_and_pivot(url, default_var_name) |> # step 1, 2 
    extract_survey_and_year() |> # step 3
    split_census_data() # step 4, 5, 6
  
  res

}

```

Next we will run our `combine_data` code that will allow us to use the function to combine the separate URL data sets into one object with separate data frames for state and county data.

```{r Initiate combine data fn}
combine_data <- function(list_of_dfs1, list_of_dfs2) {
  
  # county
  county_res <- bind_rows(list_of_dfs1$county_data, list_of_dfs2$county_data)
  
  # state
  state_res <- bind_rows(list_of_dfs1$state_data, list_of_dfs2$state_data)
  
  res <- list(county_data = county_res, state_data = state_res)
  
  res
}



```

Next, we will run each of the the census raw data URLs through our `prepare_census_data` function to generate data frames for combining into the `census_data` object we will be using for summary analysis.

```{r Read in census data}

# Reading in and prepping the two EDU01 census .csv files given

census_edu01a <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", "enrollment")

census_edu01b <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", "enrollment")

```

## Data combining

Now that we have converted the raw data into usable tibbles we can process them through our `combine_data` function to generate the `census_data` object.

```{r Combining census data}
census_data <- combine_data(census_edu01a, census_edu01b)

census_data
```

### State Plot

For consistency sakes, we will re-list the code for our `plot.state` function here before applying it to the `census_data` object.

```{r}
plot.state <- function(df, var_name = "enrollment"){
  library(ggplot2)
  
# create subset data for plotting
state_variable_plot <- df$state_data |>

# remove the error values
    filter(division != "ERROR") |>  

# subset the data to the variables of interest
    group_by(division, year) |> 
  #create the mean statistic for plotting
    summarize("mean_value" = mean(get(var_name)))

# generate the plot of year vs mean
  g_state <- ggplot(state_variable_plot, aes(year, mean_value, color=division)) 

# plot the division values
  g_state + 
    geom_line() +
    labs(title = paste("Average yearly", var_name, "by state division")) +
    xlab("Year") +
    ylab(paste("Average", var_name))

}
```

Using the `plot.state` function on `census_data` generates the plot of the `state_data` frame. This plot provides useful information that can be used to generate research questions to determine what cause such a contrast between the top 4 divisions from the bottom 5.

```{r census_data state plot}
plot.state(census_data)
```

### County plots

Like with the `plot.state` function we will re-list the `plot.county` function code before applying it to the `census_data` object.

```{r census_data county plot}
plot.county <- function(df, var_name = "enrollment", state_val = "NC", group = "top", row_display = 5) {
  library(ggplot2)

# extract the county df from the census_data object
  county_variable_subset <-  df$county_data |>

# filter the data to show only the state specified in the function string
    filter(state == state_val) |>
    
# find the overall mean of the statistic for each area name
    group_by(area_name) |> 
    summarize("mean_value" = mean(get(var_name))) 
  
# Sort the data to display the enrollment means from largest to smallest when "top" is chosen, or from smallets to largest when "bottom" is chosen. 

if(group == "top") {
  sorted_data <- county_variable_subset |> arrange(desc(mean_value))
} else if(group == "bottom") {
  sorted_data <- county_variable_subset |> arrange(mean_value)
} else {
  stop("group must be in one of c('top', 'bottom')")
}
  
# obtain the top or bottom x number of area_names where the number is given by the user or default and filter the data to only include the top or bottom area names for graphing
  
  Display_num_subset <- head(sorted_data, row_display)

  # obtaining data corresponding to the top/bottom counties of interest
  
  counties_of_interest <- df$county_data |> semi_join(Display_num_subset, by = join_by(area_name))
  
  library(stringr)
  
  counties_of_interest |> 
    ggplot(aes(x = year, y = get(var_name), color = area_name)) + 
    geom_line() +
    xlab("Year") +
    ylab(str_to_title(str_replace(get("var_name"), pattern = "_", replacement = " "))) +
    labs(title = paste(str_to_title(paste(var_name, "by county")), "in", state_val), 
         subtitle = str_to_sentence(paste(group, row_display, "counties")))

}
```

Using the `plot.county` function on `county_data` to generate plots using the below specified criteria provides useful information that can be used to generate research questions.

1.  Specify state to be "NC", group to be the "top", and the number to be looked at being "20".

```{r NC enrollment top 20}
plot.county(census_data, state_val = "NC", var_name = "enrollment", group = "top", row_display = 20)
```

2.  Specify state to be "SC", group to be the "bottom", and the number to be looked at being "7".

```{r SC enrollment bottom 7}
plot.county(census_data, state_val = "SC", var_name = "enrollment", group = "bottom", row_display = 7)
```

3.  Using defaults

```{r Default plot for NC top 5 enrollment}
plot.county(census_data)
```

4.  Specifiy state to be "PA", group to be the "top", and the number to be looked at being "8".

```{r PA enrollment top 8}
plot.county(census_data, state_val = "PA", var_name = "enrollment", group = "top", row_display = 8)
```

## Read in similar data sets and apply the developed functions.

Now that we have tested and validated that our code works effectively on the data sets it was modeled to read, we will further test the code on another 4 raw data URLs generated by a separate census surveys.

### Data processing

Processing the below URLs through the `prepare_census_data` function provides us with data frames `PST01a` through `PST01d` that we will combine into object `PST01_combined` with data frames `state_data` and `county_data`.

-   https://www4.stat.ncsu.edu/\~online/datasets/PST01a.csv

-   https://www4.stat.ncsu.edu/\~online/datasets/PST01b.csv

-   https://www4.stat.ncsu.edu/\~online/datasets/PST01c.csv

-   https://www4.stat.ncsu.edu/\~online/datasets/PST01d.csv

```{r Create PST01 data frames}

PST01a <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv", "population")

PST01b <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv", "population")

PST01c <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv", "population")

PST01d <- prepare_census_data("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv", "population")
```

## Data combining

Processing our newly generated data frames through our data will generate our `PST01_combined` data objet that will be used for subsetting before analysis. Because our function in only designed to combine two data frames at a time, we will combine `PST01a` with `PST01b`, `PST01c` with `PST01d`, then combining the resulting data frames `PST01ab` and `PST01cd` to create our desired object `PST01_combined`.

```{r Combint PST01 data frames}
PST01ab <- combine_data(PST01a, PST01b)

PST01cd <- combine_data(PST01c, PST01d)

PST01_combined <- combine_data(PST01ab, PST01cd)
```

## State data frame plot

Now that we have our data object, will use the function `plot.state` to generate the plot of `PST01_combined`'s state data frame in order to compare the mean populations of the different divisions.

```{r Plot division by year and avg population2}
plot.state(PST01_combined, "population")
```

## County data frame plots

Next, we will use the `plot.county` function to generate the plot of `PST01_combined`'s county data frame using the below specified criteria.

1.  Specify the state to be "CA", the group to be the "top", and the number looked at being "15".

```{r Plot CA top 15 population}
plot.county(PST01_combined, state_val = "CA", var_name = "population", group = "top", row_display = 15)
```

2.  Specify the state to be "TX", the group to be the "top", and the number looked at being "4".

```{r Plot TX top 4 population}
plot.county(PST01_combined, state_val = "TX", var_name = "population", group = "top", row_display = 4)
```

3.  Using defaults only.

Using the default value of "enrollment" for the variable "population" renders an error message. Because of this, we have listed the default value to be "population" to show that the code is working properly otherwise.

```{r Default plot for NC top 5 enrollment2}
plot.county(PST01_combined, "population")
```

4.  Specifying the state to be "NY", the group being the "top", and the number looked at being "10".

```{r Plot NY top 10 population}
plot.county(PST01_combined, state_val = "NY", var_name = "population", group = "top", row_display = 10)
```
