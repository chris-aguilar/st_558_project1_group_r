---
title: "ST 558 Project 1, Group R"
author: "Chris Aguilar, Jason Pattison"
format: html
editor: visual
---

## Manual read-in

For this project, we'll want to read in and prepare the data for analysis. Then we'll actually conduct the analysis. But we'll want to create functions for each step to make the code easy to maintain and debug and reuse as necessary.

First, we'll read in and prep the data manually. Afterward, we'll put those manual steps into a function.

```{r data processing}
library(readr)
library(dplyr)
library(tidyr)

# step 1 and 2 and 3
census_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv") |> 
  select(Area_name, STCOU, ends_with("D")) |> # step 1
  pivot_longer(ends_with("D")) |> # step 2
  mutate(
    measurement = substr(name, 1, 7),
    year = paste0("19", substr(name, 8, 9)) |> as.integer()) # step 3

# step 4
# Grabbing state indices so we can split the data between county/non-county data
county_idx <-  grep(pattern = ", \\w\\w", census_data$Area_name)

# county-level data
# using indices for county level, and omitting indices for non-county level data
census_county_lvl <- census_data[county_idx, ]
census_non_county_lvl <- census_data[-county_idx, ]

# New classes for new methods later
class(census_county_lvl) <- c("county", class(census_county_lvl))
class(census_non_county_lvl) <- c("state", class(census_non_county_lvl))

# step 5
# appending 2-char state abbreviation for county level data
# stringr package allows us to index in reverse, no user defined function needed
census_county_lvl <- census_county_lvl |> 
  mutate(state = stringr::str_sub(Area_name, -2))

# step 6
# Area_name has two versions of DC, which is in division 5. We'll standardize this. We assume these aren't true duplicates since STCOUs are different for upper, lowercase versions of DC.
# We'll also use built-in R variables to make a reference table for the regions.
# This will make appending division to our non-county level data simpler.

# Making reference table
# Upper casing state names for table join later
states_upper_case <- c(toupper(state.name), "DISTRICT OF COLUMBIA")
states_division <- c(state.division, factor("South Atlantic"))

state_ref_table <- data.frame(state = states_upper_case, division = states_division)

# We'll join our state reference table to our census data to append divisions.
# We do this by standardizing DC as upper case for the keys. Then, since factors can be a bit tricky, we convert to character type first. Lastly, any NAs are changed to ERROR as these don't correspond to any divisions, just "UNITED STATES"

census_non_county_lvl <- census_non_county_lvl |> 
  mutate(Area_name = toupper(Area_name)) |> 
  left_join(state_ref_table, by = join_by(Area_name == state)) |>
  mutate(division = as.character(division),
         division = if_else(is.na(division), "ERROR", division))
```


## Creating data preprocessing functions

We'll take the above manual approach and break it up into a few data processing functions so we can reuse our code for any number of data sets.

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
